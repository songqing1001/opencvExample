///////////////////////////////////////
#include <opencv2/opencv.hpp>
#include <opencv2/highgui.hpp>
#include <algorithm>
#include <iostream>
#include <fstream>

using namespace std;
using namespace cv;

int main(int argc, char *argv[])
{
    Mat img, img_edge, labels, img_color, stats, centroid;

    if(argc !=2 ||(img = imread(argv[1], CV_LOAD_IMAGE_GRAYSCALE)).empty())
    {
        cout << " should input the image name correctly"<<endl;
        return -1;
    }

    threshold(img, img_edge, 128, 255, THRESH_BINARY);

    int i;
    //int nccomps = connectedComponentsWithStats(img_edge, labels, stats, noArray());
    int nccomps = connectedComponentsWithStats(img_edge, labels, stats, noArray());

    cout << "total connected components detected :"<< nccomps <<endl;

    vector<Vec3b> colors(nccomps+1);

    colors[0] = Vec3b(0,0,0);///background pixels remain black
    for(i = 1; i <= nccomps; i++)
    {
        colors[i] = Vec3b(rand()%256, rand()%256, rand()%256);
        if(stats.at<int>(i-1, CC_STAT_AREA) < 100)
          colors[i] = Vec3b(0, 0, 0);
    }

    img_color = Mat::zeros(img.size(), CV_8UC3);
    for(int y = 0; y < img_color.rows; y++)
    {
        for(int x = 0; x < img_color.cols; x++)
        {
            int label = labels.at<int>(y,x);
            CV_Assert(0 <= label && label <= nccomps);
            img_color.at<Vec3b>(y,x) = colors[label];
        }
    }

    imwrite("./connected.jpg", img_color);

    waitKey();

    return 0;
}


